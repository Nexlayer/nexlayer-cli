# Workspace Guidelines for Nexlayer-CLI

These guidelines ensure that the Nexlayer-CLI codebase, API integrations, and YAML schema documentation are maintained in a consistent, secure, and scalable manner. Follow these rules to streamline development, testing, and deployments.

---

## Code Structure & CLI Framework

- **Cobra Framework**
  - All commands must follow the `cobra.Command` structure within the `cmd/` directory.
  - Each command's logic should be encapsulated within `pkg/commands/<command>` to maintain modularity.
  - Subcommands must adhere to Cobra's best practices:
    - Support flags, aliases, and clear descriptions.
    - Have a consistent command structure.

- **Project Organization**
  - The CLI must be built using `go build` and managed with a `go.mod` file.
  - No Bazel; all dependency management must be version-locked within `go.mod`.
  - Place the integrated API and YAML schema documentation (the in‑memory JSON reference) in a dedicated directory (e.g., `docs/api-reference.json`). This file must be kept up-to-date with changes to the API or YAML schema.

---

## Build & Dependency Management

- **Build Rules**
  - All builds must use `go build ./...` or appropriate cross-compilation options (using `GOOS` and `GOARCH` flags).
  - Ensure reproducible builds by running `go mod tidy` to remove unused dependencies.
  - Cross-platform compatibility is essential:
    - Ensure support for Linux, macOS, and Windows.
    - Use `os.PathSeparator` for path compatibility.
    - Consider shell differences (e.g., `cmd.exe` vs. `sh`) when scripting.

- **Dependency Locking**
  - All dependency versions must be locked in `go.mod`.
  - No external build tools (like Bazel) should be used for dependency management.

---

## Testing & CI/CD

- **Testing Guidelines**
  - Use Go’s built-in testing package for unit and integration tests.
  - Every major function should have a corresponding `_test.go` file in the same package.
  - Use `github.com/stretchr/testify` for assertions and test helpers.
  - Write table-driven tests where applicable.
  - Ensure tests cover:
    - API interactions (`pkg/core/api`)
    - Command execution (`pkg/commands`)
    - Configuration parsing (`pkg/config`)
  - CI/CD must enforce running `go test ./...` with a minimum of 80% test coverage.

- **Error Handling & Structured Output**
  - All errors must return structured JSON when the `--json` flag is used.
  - Default CLI output should be human-readable.
  - When `--json` is passed, errors must be structured as:
    ```json
    { "error": "<message>", "code": <int> }
    ```
  - Exit codes must be standardized:
    - **0:** Success.
    - **1:** General error.
    - **2:** YAML validation failure.
    - **3:** API request failure.

---

## YAML Validation & API Integration

- **YAML Schema Enforcement**
  - The CLI must validate `nexlayer.yaml` before any deployment.
  - Validation must ensure compliance with the Nexlayer YAML Schema v1.2:
    - Required fields (e.g., `application`, `pods`, `servicePorts`) must be present.
    - Environment variables in the `vars` section must be correctly formatted.
    - Check for invalid or missing API references.
  - The `validate` subcommand should display errors with structured suggestions for correction.

- **API Endpoint Usage**
  - Only officially approved Nexlayer API endpoints should be used:
    - `/startUserDeployment`
    - `/getDeployments`
    - `/saveCustomDomain`
  - API interactions must be handled through `pkg/core/api` to ensure strict compliance.
  - Do not call undocumented, deprecated, or internal Nexlayer APIs.
  - API calls must include retry logic for transient failures (e.g., network timeouts).

---

## File Management & User Prompts

- **User File Safety**
  - The CLI must not modify any existing `nexlayer.yaml` or other configuration files without explicit user confirmation.
  - If `init` or `sync` commands generate new files:
    - Always prompt users before overwriting files.
    - Provide a `--force` flag to skip confirmation when necessary.

---

## Logging & Security

- **Sensitive Data Protection**
  - Logging must never include API keys, tokens, or any sensitive credentials.
  - Redact sensitive values when printing configurations.
  - Ensure that `pkg/observability` is used for structured logging.

---

## Interactive & Non-Interactive Modes

- **Command Behavior**
  - Commands must support both interactive and non-interactive modes.
  - The `--silent` flag should suppress all prompts for CI/CD or automated usage.
  - Default execution should provide interactive feedback for a better user experience.
  - Use `pkg/ui` (e.g., charmbracelet/bubbletea) to enhance the user interface where applicable.

---

## Why These Guidelines Matter

- **Consistency & Maintainability**
  - A structured CLI built on Cobra ensures modularity and ease of maintenance.
  - Strict dependency and build management guarantee reproducible builds.
  
- **Robust Testing & Automation**
  - Comprehensive tests (unit and integration) ensure stability and reliable API interactions.
  - CI/CD integration with enforced test coverage provides confidence in deployment reliability.

- **Security & User Trust**
  - YAML validation and structured error handling prevent misconfigurations.
  - Sensitive data redaction in logs protects user credentials.
  
- **User Experience & Cross-Platform Support**
  - Interactive and non-interactive modes cater to both manual and automated workflows.
  - Cross-platform compatibility ensures that the CLI works seamlessly across Linux, macOS, and Windows.

With these guidelines, the Nexlayer-CLI will be modular, efficient, and built for long-term scalability while ensuring rapid and secure deployments using the integrated Nexlayer API and YAML schema template.
