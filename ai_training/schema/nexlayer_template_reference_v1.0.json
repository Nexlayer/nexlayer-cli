{
  "version": "1.0",
  "schema": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "required": ["application"],
    "properties": {
      "application": {
        "type": "object",
        "required": ["name", "pods"],
        "properties": {
          "name": {
            "type": "string",
            "description": "REQUIRED: The name of the deployment (must be unique)"
          },
          "url": {
            "type": "string",
            "description": "OPTIONAL: Permanent domain (only include if needed)"
          },
          "registryLogin": {
            "type": "object",
            "required": ["registry", "username", "personalAccessToken"],
            "properties": {
              "registry": {
                "type": "string",
                "description": "REQUIRED for private images: The registry for images"
              },
              "username": {
                "type": "string",
                "description": "REQUIRED if using a private registry"
              },
              "personalAccessToken": {
                "type": "string",
                "description": "REQUIRED for read-only registry authentication"
              }
            }
          },
          "pods": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["name", "image", "servicePorts"],
              "properties": {
                "name": {
                  "type": "string",
                  "pattern": "^[a-z][a-z0-9\\.\\-]*$",
                  "description": "REQUIRED: Pod name (must start with a lowercase letter, only alphanumeric, '-', or '.')"
                },
                "path": {
                  "type": "string",
                  "description": "OPTIONAL: Route path for frontend (e.g., '/' for web apps)"
                },
                "image": {
                  "type": "string",
                  "description": "REQUIRED: Docker image path (supports '<% REGISTRY %>' for private images)"
                },
                "volumes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": ["name", "size", "mountPath"],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "REQUIRED: Name of the volume"
                      },
                      "size": {
                        "type": "string",
                        "pattern": "^\\d+[KMGT]i$",
                        "description": "REQUIRED: Volume size (e.g., '1Gi')"
                      },
                      "mountPath": {
                        "type": "string",
                        "description": "REQUIRED: Path inside the container"
                      }
                    }
                  }
                },
                "secrets": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": ["name", "data", "mountPath", "fileName"],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "REQUIRED: Secret name"
                      },
                      "data": {
                        "type": "string",
                        "description": "REQUIRED: Base64-encoded or raw secret value"
                      },
                      "mountPath": {
                        "type": "string",
                        "description": "REQUIRED: Directory where the secret file will be stored"
                      },
                      "fileName": {
                        "type": "string",
                        "description": "REQUIRED: File name for the secret (e.g., 'config.json')"
                      }
                    }
                  }
                },
                "vars": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": ["key", "value"],
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "REQUIRED: Environment variable key"
                      },
                      "value": {
                        "type": "string",
                        "description": "REQUIRED: Value (Supports: pod references, '<% URL %>', etc.)"
                      }
                    }
                  }
                },
                "servicePorts": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 65535,
                    "description": "REQUIRED: Port to expose (e.g., 3000)"
                  },
                  "minItems": 1
                }
              }
            },
            "minItems": 1
          }
        }
      }
    }
  },
  "componentTypes": {
    "frontend": {
      "supported": {
        "react": {
          "image": "docker.io/library/node:18-alpine",
          "defaultPorts": [
            {
              "containerPort": 3000,
              "servicePort": 80,
              "name": "web"
            }
          ],
          "env": [
            {
              "key": "NODE_ENV",
              "value": "production"
            },
            {
              "key": "REACT_APP_API_URL",
              "value": "http://CANDIDATE_DEPENDENCY_URL_0"
            }
          ]
        },
        "nextjs": {
          "image": "docker.io/library/node:18-alpine",
          "defaultPorts": [
            {
              "containerPort": 3000,
              "servicePort": 80,
              "name": "web"
            }
          ],
          "env": [
            {
              "key": "NODE_ENV",
              "value": "production"
            }
          ]
        },
        "vue": {
          "image": "docker.io/library/node:18-alpine",
          "defaultPorts": [
            {
              "containerPort": 8080,
              "servicePort": 80,
              "name": "web"
            }
          ]
        }
      }
    },
    "backend": {
      "supported": {
        "fastapi": {
          "image": "docker.io/library/python:3.11-slim",
          "defaultPorts": [
            {
              "containerPort": 8000,
              "servicePort": 8000,
              "name": "api"
            }
          ],
          "env": [
            {
              "key": "PORT",
              "value": "8000"
            }
          ]
        },
        "express": {
          "image": "docker.io/library/node:18-alpine",
          "defaultPorts": [
            {
              "containerPort": 3000,
              "servicePort": 3000,
              "name": "api"
            }
          ]
        },
        "django": {
          "image": "docker.io/library/python:3.11-slim",
          "defaultPorts": [
            {
              "containerPort": 8000,
              "servicePort": 8000,
              "name": "api"
            }
          ]
        }
      }
    },
    "database": {
      "supported": {
        "postgres": {
          "image": "docker.io/library/postgres:latest",
          "defaultPorts": [
            {
              "containerPort": 5432,
              "servicePort": 5432,
              "name": "postgres"
            }
          ],
          "env": [
            {
              "key": "POSTGRES_USER",
              "value": "postgres"
            },
            {
              "key": "POSTGRES_PASSWORD",
              "value": "REQUIRED"
            }
          ]
        },
        "mongodb": {
          "image": "docker.io/library/mongo:latest",
          "defaultPorts": [
            {
              "containerPort": 27017,
              "servicePort": 27017,
              "name": "mongodb"
            }
          ],
          "env": [
            {
              "key": "MONGO_INITDB_ROOT_USERNAME",
              "value": "REQUIRED"
            },
            {
              "key": "MONGO_INITDB_ROOT_PASSWORD",
              "value": "REQUIRED"
            }
          ]
        },
        "redis": {
          "image": "docker.io/library/redis:7",
          "defaultPorts": [
            {
              "containerPort": 6379,
              "servicePort": 6379,
              "name": "redis"
            }
          ]
        }
      }
    },
    "llm": {
      "supported": {
        "ollama": {
          "image": "docker.io/ollama/ollama:latest",
          "defaultPorts": [
            {
              "containerPort": 11434,
              "servicePort": 11434,
              "name": "ollama"
            }
          ]
        },
        "langfuse": {
          "image": "docker.io/langfuse/langfuse:3",
          "defaultPorts": [
            {
              "containerPort": 3000,
              "servicePort": 3000,
              "name": "langfuse"
            }
          ]
        }
      }
    }
  },
  "examples": {
    "ai_stack": {
      "application": {
        "template": {
          "name": "AIApp",
          "deploymentName": "ai-app"
        }
      },
      "pods": [
        {
          "name": "ollama",
          "image": "docker.io/ollama/ollama:latest",
          "expose": false,
          "ports": [
            {
              "containerPort": 11434,
              "servicePort": 11434,
              "name": "ollama"
            }
          ]
        },
        {
          "name": "web-ui",
          "image": "${REGISTRY}/web-ui:v1",
          "expose": true,
          "path": "/",
          "ports": [
            {
              "containerPort": 3000,
              "servicePort": 80,
              "name": "web"
            }
          ],
          "vars": [
            {
              "key": "REACT_APP_API_URL",
              "value": "http://ollama:11434"
            }
          ]
        }
      ]
    },
    "full_stack": {
      "application": {
        "template": {
          "name": "FullStackApp",
          "deploymentName": "fullstack-app"
        }
      },
      "pods": [
        {
          "name": "web-ui",
          "image": "${REGISTRY}/web-ui:v1",
          "expose": true,
          "path": "/",
          "ports": [
            {
              "containerPort": 3000,
              "servicePort": 80,
              "name": "web"
            }
          ],
          "vars": [
            {
              "key": "REACT_APP_API_URL",
              "value": "http://api:3000"
            }
          ]
        },
        {
          "name": "api",
          "image": "${REGISTRY}/api:v1",
          "expose": false,
          "ports": [
            {
              "containerPort": 8000,
              "servicePort": 8000,
              "name": "api"
            }
          ],
          "vars": [
            {
              "key": "DATABASE_URL",
              "value": "postgresql://postgres-db:5432/mydb"
            }
          ]
        },
        {
          "name": "postgres-db",
          "image": "docker.io/library/postgres:latest",
          "expose": false,
          "ports": [
            {
              "containerPort": 5432,
              "servicePort": 5432,
              "name": "postgres"
            }
          ],
          "secrets": [
            {
              "key": "POSTGRES_USER",
              "value": "postgres"
            },
            {
              "key": "POSTGRES_PASSWORD",
              "value": "REQUIRED"
            }
          ]
        }
      ]
    }
  },
  "bestPractices": {
    "ports": [
      "Use descriptive port names that reflect the service (e.g., 'web', 'api', 'db')",
      "Ensure port names are unique within each pod",
      "Service ports must be unique across all pods",
      "Follow standard port conventions (80 for HTTP, 443 for HTTPS)"
    ],
    "environment": [
      "Use CANDIDATE_DEPENDENCY_URL_X for internal service URLs",
      "Store sensitive data in the 'secrets' section",
      "Use clear and descriptive variable names",
      "Document all required environment variables"
    ],
    "routing": [
      "For externally accessible pods, set 'expose: true' and define the 'path' (e.g., '/' for the main UI, '/api' for backend)",
      "Leverage Kubernetes Ingress for dynamic DNS and routing"
    ],
    "security": [
      "Never store secrets in template files",
      "Use non-root users within containers",
      "Set proper resource limits and network policies"
    ]
  },
  "validation": {
    "required": [
      "Template must include application.template.name and deploymentName",
      "Each pod must have a unique 'name' and a valid 'image'",
      "Port names must be unique within a pod",
      "Service ports must be unique across all pods"
    ],
    "recommended": [
      "Include resource limits for all pods",
      "Configure health checks",
      "Set appropriate environment variables",
      "Use specific image tags (avoid 'latest')"
    ]
  },
  "trainingNotes": {
    "instructions": "This JSON reference is the authoritative source for generating Nexlayer YAML templates. The AI agent must strictly adhere to these specifications to ensure accurate and production-ready deployments. Do not hallucinate or generate extra fields. Use only the specified fields and follow the schema exactly. Update this reference as new learnings from deployments and user feedback are obtained.",
    "versioning": "Update this document whenever significant changes to the Nexlayer template structure occur.",
    "errorPrevention": "Ensure that all generated templates include required fields and validate against this schema. If a field is missing or invalid, the AI must flag it and provide a clear error message."
  }
}
