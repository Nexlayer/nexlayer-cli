-e // Generated by gofmt -s
// Formatted with gofmt -s
package commands

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"time"

	"github.com/Nexlayer/nexlayer-cli/pkg/api"
	"github.com/Nexlayer/nexlayer-cli/pkg/config"
	"github.com/Nexlayer/nexlayer-cli/pkg/errors"
	"github.com/briandowns/spinner"
	"github.com/fatih/color"
	"github.com/spf13/cobra"
	"gopkg.in/yaml.v2"
)

var (
	environment string
	debug       bool
)

// DeployCmd represents the deploy command
var DeployCmd = &cobra.Command{
	Use:   "deploy [templateId]",
	Short: "Deploy an application",
	Long: `Deploy an application using either a predefined template or a custom YAML configuration.

Examples:
  # Deploy using a template
  nexlayer deploy hello-world

  # Deploy to a specific environment
  nexlayer deploy hello-world --env production

  # Deploy with debug output
  nexlayer deploy hello-world --debug`,
	Args: cobra.ExactArgs(1),
	RunE: runDeploy,
}

func init() {
	DeployCmd.Flags().StringVarP(&environment, "env", "e", "staging", "Target environment (staging/production)")
	DeployCmd.Flags().BoolVarP(&debug, "debug", "d", false, "Enable debug output")
}

func runDeploy(cmd *cobra.Command, args []string) error {
	templateName := args[0]

	// Create a spinner for better UX
	s := spinner.New(spinner.CharSets[14], 100*time.Millisecond)
	s.Prefix = fmt.Sprintf("Preparing deployment for %s ", templateName)
	s.Start()

	// Validate environment
	env, valid := config.ValidateEnvironment(environment)
	if !valid {
		return errors.NewValidationError(
			"Invalid environment specified",
			nil,
			"Use --env staging or --env production",
			"Default environment is staging if not specified",
		)
	}

	// Get session ID from environment
	sessionID := os.Getenv("NEXLAYER_AUTH_TOKEN")
	if sessionID == "" {
		return errors.NewAuthError(
			"Authentication required",
			nil,
			"Visit https://app.nexlayer.io/settings/tokens to generate a token",
		)
	}

	// Read and validate the template YAML
	s.Suffix = " Reading template configuration"
	templatePath := filepath.Join("examples", "plugins", "template-builder", fmt.Sprintf("%s-template.yaml", templateName))
	yamlContent, err := ioutil.ReadFile(templatePath)
	if err != nil {
		return errors.NewConfigError(
			fmt.Sprintf("Failed to read template file for %s", templateName),
			err,
			fmt.Sprintf("Ensure the file exists at: %s", templatePath),
			"Check file permissions",
		)
	}

	// Validate YAML structure
	var templateConfig map[string]interface{}
	if err := yaml.Unmarshal(yamlContent, &templateConfig); err != nil {
		return errors.NewValidationError(
			"Invalid template YAML",
			err,
			"Check the YAML syntax",
			"Ensure all required fields are present",
			"Run 'nexlayer validate' to check template structure",
		)
	}

	// Update spinner for deployment
	s.Suffix = " Initiating deployment"

	// Get API endpoint from config
	cfg := config.GetConfig()
	baseURL := cfg.GetAPIEndpoint(env)

	if debug {
		fmt.Printf("
üîç Debug: Using API endpoint %s
", baseURL)
	}

	client := api.NewClient(baseURL)
	resp, err := client.StartDeployment(sessionID, yamlContent)
	if err != nil {
		return errors.NewDeploymentError(
			"Deployment failed",
			err,
			"Check your network connection",
			"Verify your authentication token",
			"Run with --debug flag for more information",
		)
	}

	// Stop spinner and show success message
	s.Stop()
	success := color.New(color.FgGreen).SprintFunc()
	fmt.Printf("
%s Deployment successful!
", success("‚úì"))

	// Print deployment details
	fmt.Printf("
üìã Deployment Details:
")
	fmt.Printf("   ‚Ä¢ Namespace: %s
", resp.Namespace)
	fmt.Printf("   ‚Ä¢ URL: %s
", resp.URL)
	fmt.Printf("   ‚Ä¢ Environment: %s
", environment)
	if resp.Message != "" {
		fmt.Printf("   ‚Ä¢ Message: %s
", resp.Message)
	}

	fmt.Printf("
üí° Next steps:
")
	fmt.Printf("   ‚Ä¢ Monitor status: nexlayer status %s
", resp.Namespace)
	fmt.Printf("   ‚Ä¢ View logs: nexlayer logs %s
", resp.Namespace)
	fmt.Printf("   ‚Ä¢ Scale app: nexlayer scale %s --replicas 3
", resp.Namespace)

	return nil
}

