name: Train model op
inputs:
- {name: data, type: CSV}
outputs:
- {name: model, type: Joblib}
- {name: x_test, type: CSV}
- {name: y_test, type: CSV}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def train_model_op(data_path,
                        model_path,
                        x_test_path,
                        y_test_path):
          import pandas as pd
          from sklearn.model_selection import train_test_split
          from sklearn.ensemble import RandomForestClassifier
          import joblib

          # Load data
          data = pd.read_csv(data_path)
          X = data[['feature1', 'feature2']]
          y = data['target']

          # Split data
          X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

          # Train model
          model = RandomForestClassifier()
          model.fit(X_train, y_train)

          # Save outputs
          joblib.dump(model, model_path)
          X_test.to_csv(x_test_path, index=False)
          y_test.to_csv(y_test_path, index=False)

      import argparse
      _parser = argparse.ArgumentParser(prog='Train model op', description='')
      _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--model", dest="model_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--x-test", dest="x_test_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--y-test", dest="y_test_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = train_model_op(**_parsed_args)
    args:
    - --data
    - {inputPath: data}
    - --model
    - {outputPath: model}
    - --x-test
    - {outputPath: x_test}
    - --y-test
    - {outputPath: y_test}
